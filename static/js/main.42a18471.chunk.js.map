{"version":3,"sources":["components/header/header.component.jsx","components/gameslist/gameslist.component.jsx","components/score-components/score-add.component.jsx","components/score-components/final-score.component.jsx","components/score-components/score-boolean.component.jsx","components/score-components/score-multiply.component.jsx","components/score-components/score-divide.component.jsx","components/game-overview/game-overview.component.jsx","App.js","index.js"],"names":["Header","className","to","GamesList","props","state","games","name","id","this","map","game","key","Component","ScoreAdd","handleChange","e","sum","Number","target","value","setState","handleClick","number","handleSubmit","componentParams","positive","score","addScore","response","label","TextField","onChange","ButtonGroup","variant","color","aria-label","Button","onClick","size","FinalScore","finalScore","operation","operationValue","ScoreBoolean","console","log","question","onTrue","onFalse","ScoreMultiply","newState","value1","value2","place","round","mult","newValue","product","value1Value","lastResponse","value2Value","value1Disabled","value2Disabled","htmlFor","type","disabled","ScoreDivide","divide","direction","Math","floor","GameOverview","componentDidMount","currentGame","find","returned","currentComponent","scoreComponents","currentScoreComponent","currentScore","scoreClicked","length","button","buttonText","buttonState","setSum","match","params","gameId","component","ScoreComponent","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42a18471.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './header.component.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header'>\r\n            <Link to='/' className='logo'>Score It!</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nimport './gameslist.component.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass GamesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            games: [\r\n                {\r\n                    name: 'Blokus',\r\n                    id: 1\r\n                },\r\n                {\r\n                    name: 'Traders of Osaka',\r\n                    id: 2\r\n                },\r\n                {\r\n                    name: 'Brass: Lancashire',\r\n                    id: 3\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='games-list-container'>\r\n                <div>\r\n                    <h1>Games List</h1>\r\n                </div>\r\n                <div className='games-list'>\r\n                    { this.state.games.map((game) => {\r\n                        return <div className='games-list-item' key={game.id}>\r\n                                <Link className='games-list-link'  to={`games/${game.id}`}>{game.name}</Link>\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>              \r\n            </div>\r\n        )\r\n    }\r\n        \r\n    \r\n}\r\n\r\nexport default GamesList;","import React, { Component } from 'react';\r\n\r\nimport './score-components.styles.scss';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass ScoreAdd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            sum: 0\r\n        }\r\n            \r\n    }\r\n\r\n    handleChange = e => {\r\n        const sum = Number(e.target.value);\r\n        this.setState({sum})\r\n    }\r\n\r\n    handleClick = (number) => {\r\n        //const value = this.props.componentParams.positive ? number : number * -1\r\n        this.setState({sum: this.state.sum + number});\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        const value = this.props.componentParams.positive ? Number(this.state.sum) : Number(this.state.sum) * -1\r\n        const score = this.props.componentParams.addScore === false ? null : value;\r\n        const response = value\r\n        this.props.handleClick({score, response})\r\n        this.setState({sum: 0})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='center'>\r\n                <div className='score-component-text'>{this.props.componentParams.label}</div>\r\n                <form>\r\n                    <TextField id=\"standard-basic\" className='numberInput' value={this.state.sum} onChange={this.handleChange}/>\r\n                </form>\r\n\r\n                <div className='calculator' >\r\n                <ButtonGroup variant='contained' color=\"default\" aria-label=\"outlined primary button group\">\r\n                    <Button value='1' onClick={() => {this.handleClick(1)}}>+1</Button>\r\n                    <Button value='5' onClick={() => {this.handleClick(5)}}>+5</Button>\r\n                </ButtonGroup>\r\n                </div>\r\n\r\n                <div className='buttonNext' >\r\n                    <Button size='large' variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>NEXT</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ScoreAdd;","import React from 'react';\r\n\r\nconst FinalScore = (props) => {\r\n    // const performOn = props.componentParams.performOn === 'lastResponse' ? props.lastResponse : props.score;\r\n    // console.log(performOn)\r\n    let finalScore = props.score;\r\n    \r\n    if (props.componentParams.operation === 'divide') {\r\n        finalScore = props.score / props.componentParams.operationValue;\r\n    }\r\n\r\n    return <div>Final Score: {finalScore}</div>\r\n}\r\n\r\nexport default FinalScore;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nclass ScoreBoolean extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            sum: 0\r\n        }\r\n            \r\n    }\r\n\r\n    handleSubmit = value => {\r\n        console.log(value)\r\n        this.props.handleClick({score: value})\r\n        \r\n        this.setState({sum: 0})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='center'>\r\n                <div>\r\n                    {this.props.componentParams.question}\r\n                    \r\n                </div>\r\n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"outlined primary button group\">\r\n                    <Button value={this.props.componentParams.onTrue} onClick={() => {this.handleSubmit(this.props.componentParams.onTrue)}}>Yes</Button>\r\n                    <Button value={this.props.componentParams.onFalse} onClick={() => {this.handleSubmit(this.props.componentParams.onFalse)}}>No</Button>\r\n                </ButtonGroup>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ScoreBoolean;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ScoreMultiply extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const value1 = this.props.componentParams.value1;\r\n        const value2 = this.props.componentParams.value2;\r\n        const value1Value = value1.value === 'previousScore' ? this.props.lastResponse : 0;\r\n        const value2Value = value2.value === 'previousScore' ? this.props.lastResponse : 0;\r\n      \r\n        \r\n        this.state = {\r\n            value1: value1Value,\r\n            value2: value2Value,\r\n            product: 1\r\n        }\r\n            \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState ({\r\n            value1: this.props.componentParams.value1.value === 'previousScore' ? this.props.lastResponse : 0,\r\n            value2: this.props.componentParams.value2.value === 'previousScore' ? this.props.lastResponse : 0,\r\n            product: 1\r\n        })\r\n    }\r\n\r\n    handleChange = e => {\r\n        const newState = this.state;\r\n        const value = Number(e.target.value);\r\n        \r\n        if(e.target.id === 'value1') {\r\n            newState.value1 = value;\r\n        }\r\n        if(e.target.id === 'value2') {\r\n            newState.value2 = value;\r\n        }\r\n\r\n        this.setState(newState, () => {\r\n            console.log(this.state)\r\n        })\r\n    }\r\n\r\n    handleClick = (number) => {\r\n        const value = this.props.componentParams.positive ? number : number * -1\r\n        this.setState({sum: this.state.sum + value});\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        const place = this.props.componentParams.round.place;\r\n        const mult = this.state.value1 * this.state.value2\r\n        const roundUp = mult % place > 0 ? place - (mult % place) : 0;\r\n        const newValue = mult + roundUp;\r\n        \r\n        this.props.handleClick({score: newValue})\r\n        this.setState({\r\n            value1: 0,\r\n            value2: 0,\r\n            product: 1\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const value1 = this.props.componentParams.value1;\r\n        const value2 = this.props.componentParams.value2;\r\n        // const value1Value = value1.value === 'previousScore' ? this.props.lastResponse : this.state.value1;\r\n        // const value2Value = value2.value === 'previousScore' ? this.props.lastResponse : this.state.value2;\r\n        const value1Disabled = value1.value === 'previousScore' ? true : false;\r\n        const value2Disabled = value2.value === 'previousScore' ? true : false;\r\n\r\n        return (\r\n            <div className='center'>\r\n                <form>\r\n                    <div className='center'>\r\n                    <label htmlFor='value1'>{value1.label}</label><br></br>\r\n                    <input type='text' id='value1' value={this.state.value1} disabled={value1Disabled} onChange={this.handleChange}/><br></br>\r\n                    <label htmlFor='value2'>{value2.label}</label><br></br>\r\n                    <input type='text' id='value2' value={this.state.value2} disabled={value2Disabled} onChange={this.handleChange}/>\r\n                    </div>\r\n                </form>\r\n\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>NEXT</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ScoreMultiply;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ScoreDivide extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const value1 = this.props.componentParams.value1;\r\n        const value2 = this.props.componentParams.value2;\r\n        let value1Value = value1.value === 'previousScore' ? this.props.lastResponse : this.props.componentParams.value;\r\n        let value2Value = value2.value === 'previousScore' ? this.props.lastResponse : this.props.componentParams.value;\r\n        let value1Disabled = value1.value === 'previousScore' ? true : false;\r\n        let value2Disabled = value2.value === 'previousScore' ? true : false;\r\n\r\n        if( value1.type === 'fixed' ) {\r\n            value1Value = value1.value\r\n            value1Disabled = true;\r\n        } else if (value1.value === 'previousScore') {\r\n            value1Value = this.props.lastResponse\r\n            value1Disabled = true;\r\n        } else {\r\n            value1Value = this.props.componentParams.value\r\n        }\r\n\r\n        if( value2.type === 'fixed' ) {\r\n            value2Value = value2.value\r\n            value2Disabled = true;\r\n        } else if (value2.value === 'previousScore') {\r\n            value2Value = this.props.lastResponse\r\n            value2Disabled = true;\r\n        } else {\r\n            value2Value = this.props.componentParams.value\r\n        }\r\n        \r\n        this.state = {\r\n            value1Value,\r\n            value2Value,\r\n            value1Disabled,\r\n            value2Disabled\r\n        }\r\n            \r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setState ({\r\n        //     value1: this.props.componentParams.value1.value === 'previousScore' ? this.props.lastResponse : 0,\r\n        //     value2: this.props.componentParams.value2.value === 'previousScore' ? this.props.lastResponse : 0\r\n        // })\r\n    }\r\n\r\n    handleChange = e => {\r\n        const newState = this.state;\r\n        const value = Number(e.target.value);\r\n        \r\n        if(e.target.id === 'value1') {\r\n            newState.value1Value = value;\r\n        }\r\n        if(e.target.id === 'value2') {\r\n            newState.value2Value = value;\r\n        }\r\n\r\n        this.setState(newState, () => {\r\n            console.log(this.state)\r\n        })\r\n    }\r\n\r\n    handleClick = (number) => {\r\n        const value = this.props.componentParams.positive ? number : number * -1\r\n        this.setState({sum: this.state.sum + value});\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        const place = this.props.componentParams.round.place;\r\n        const divide = this.state.value1Value / this.state.value2Value\r\n        const newValue = this.props.componentParams.round.direction === 'down' ? Math.floor(divide) : divide;\r\n        \r\n        \r\n        this.props.handleClick({score: newValue})\r\n        // this.setState({\r\n        //     value1: 0,\r\n        //     value2: 0,\r\n        //     product: 1\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const value1 = this.props.componentParams.value1;\r\n        const value2 = this.props.componentParams.value2;\r\n        // let value1Value = value1.value === 'previousScore' ? this.props.lastResponse : this.props.componentParams.value;\r\n        // let value2Value = value2.value === 'previousScore' ? this.props.lastResponse : this.props.componentParams.value;\r\n        // let value1Disabled = value1.value === 'previousScore' ? true : false;\r\n        // let value2Disabled = value2.value === 'previousScore' ? true : false;\r\n\r\n        // if( value1.type === 'fixed' ) {\r\n        //     value1Value = value1.value\r\n        //     value1Disabled = true;\r\n        // } else if (value1.value === 'previousScore') {\r\n        //     value1Value = this.props.lastResponse\r\n        //     value1Disabled = true;\r\n        // } else {\r\n        //     value1Value = this.props.componentParams.value\r\n        // }\r\n\r\n        // if( value2.type === 'fixed' ) {\r\n        //     value2Value = value2.value\r\n        //     value2Disabled = true;\r\n        // } else if (value2.value === 'previousScore') {\r\n        //     value2Value = this.props.lastResponse\r\n        //     value2Disabled = true;\r\n        // } else {\r\n        //     value2Value = this.props.componentParams.value\r\n        // }\r\n\r\n        return (\r\n            <div className='center'>\r\n                <form>\r\n                    <div className='center'>\r\n                    <label htmlFor='value1'>{value1.label}</label><br></br>\r\n                    <input type='text' id='value1' value={this.state.value1Value} disabled={this.state.value1Disabled} onChange={this.handleChange}/><br></br>\r\n                    <label htmlFor='value2'>{value2.label}</label><br></br>\r\n                    <input type='text' id='value2' value={this.state.value2Value} disabled={this.state.value2Disabled} onChange={this.handleChange}/>\r\n                    </div>\r\n                </form>\r\n\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>NEXT</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ScoreDivide;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ScoreAdd from '../score-components/score-add.component'\r\nimport FinalScore from '../score-components/final-score.component'\r\nimport ScoreBoolean from '../score-components/score-boolean.component'\r\nimport ScoreMultiply from '../score-components/score-multiply.component'\r\nimport ScoreDivide from '../score-components/score-divide.component'\r\n\r\nclass GameOverview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const id = props.match.params.gameId;\r\n        \r\n        this.state = {\r\n            scoreClicked: false,\r\n            button: {\r\n                buttonState: 'init',\r\n                buttonText: \"SCORE IT!\"\r\n            },\r\n            id,\r\n            currentScoreComponent: 0,\r\n            currentGame: {},\r\n            currentScore: 0,\r\n            lastResponse: '',\r\n            games: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Blokus',\r\n                    scoreComponents: [\r\n                        {\r\n                            component: ScoreAdd,\r\n                            componentParams: {\r\n                                positive: false,\r\n                                addScore: true,\r\n                                label: \"Enter the number of squares you have in your remaining tiles.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            component: ScoreBoolean,\r\n                            componentParams: {\r\n                                question: 'Is the last piece you placed on the board your smallest piece (1 square)?',\r\n                                onTrue: 5,\r\n                                onFalse: 0\r\n                            }\r\n                        },\r\n                        {\r\n                            component: ScoreBoolean,\r\n                            componentParams: {\r\n                                question: 'Did you place all of your tiles?',\r\n                                onTrue: 15,\r\n                                onFalse: 0\r\n                            }\r\n                        },\r\n                        {\r\n                            component: FinalScore,\r\n                            type: 'final',\r\n                            componentParams: {}\r\n                        }\r\n                    ]\r\n                    \r\n                },\r\n                {\r\n                    name: 'Traders of Osaka',\r\n                    id: 2,\r\n                    scoreComponents: [\r\n                        {\r\n                            component: ScoreAdd,\r\n                            componentParams: {\r\n                                positive: true,\r\n                                addScore: false,\r\n                                label: \"Enter the number of cards in the set being sold plus the number of achievement tokens in that color.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            component: ScoreMultiply,\r\n                            componentParams: {\r\n                                round: {\r\n                                    direction: 'up',\r\n                                    place: 5\r\n                                },\r\n                                value1: {\r\n                                    type: 'input',\r\n                                    label: 'Enter the value of the highest value card in the set being sold'\r\n                                },\r\n                                value2: {\r\n                                    type: 'input',\r\n                                    label: 'Value from the previous entry',\r\n                                    value: 'previousScore'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            component: FinalScore,\r\n                            type: 'final',\r\n                            componentParams: {\r\n                                operation: 'divide',\r\n                                operationValue: 5\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    name: 'Brass: Lancashire',\r\n                    id: 3,\r\n                    scoreComponents: [\r\n                        {\r\n                            component: ScoreAdd,\r\n                            componentParams: {\r\n                                positive: true,\r\n                                addScore: true,\r\n                                label: \"End of Canal Era: For each of your link tiles, add 1 for each connect icon in adjacent locations.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            component: ScoreAdd,\r\n                            componentParams: {\r\n                                positive: true,\r\n                                addScore: true,\r\n                                label: \"End of Canal Era: Add all points from your flipped tiles.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            component: ScoreAdd,\r\n                            componentParams: {\r\n                                positive: true,\r\n                                addScore: true,\r\n                                label: \"End of Game: For each of your link tiles, add 1 for each connect icon in adjacent locations.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            component: ScoreAdd,\r\n                            componentParams: {\r\n                                positive: true,\r\n                                addScore: true,\r\n                                label: \"End of Game: Add all points from your flipped tiles.\"\r\n                            }\r\n                        },{\r\n                            component: ScoreDivide,\r\n                            componentParams: {\r\n                                positive: true,\r\n                                addScore: true,\r\n                                round: {\r\n                                    direction: 'down',\r\n                                    place: 1\r\n                                },\r\n                                value1: {\r\n                                    type: 'input',\r\n                                    label: \"End of Game: Add all Pounds remaining.\"\r\n                                },\r\n                                value2: {\r\n                                    type: 'fixed',\r\n                                    label: '1 Point for every 10 Pounds',\r\n                                    value: 10\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            component: FinalScore,\r\n                            type: 'final',\r\n                            componentParams: {}\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const newState = this.state;\r\n        newState.currentGame = this.state.games.find(game => game.id == this.state.id);\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleClick = returned => {\r\n        const newState = this.state;\r\n        const currentComponent = newState.currentGame.scoreComponents[newState.currentScoreComponent];\r\n        console.log(returned)   \r\n        //newState.currentScore = returned.score === null ? 0 : newState.currentScore + returned.score;\r\n        newState.currentScore = returned.score ? newState.currentScore + returned.score : newState.currentScore;\r\n        newState.lastResponse = returned.response ? returned.response : this.state.lastResponse;\r\n\r\n        if(newState.scoreClicked) {newState.currentScoreComponent++}   \r\n        newState.scoreClicked = true;\r\n\r\n        if (newState.currentScoreComponent === 0 && this.state.currentGame.scoreComponents.length > 1) {\r\n            newState.button.buttonText = 'In Overview';\r\n        } else if (currentComponent.type === 'final') {\r\n            newState.button.buttonState = 'hide';\r\n        }\r\n\r\n        //console.log(newState)\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    setSum = sum => {\r\n        console.log(sum)\r\n    }\r\n\r\n    render() {\r\n        const game = this.state.games.find(game => game.id == this.state.id);\r\n        const currentGame = this.state.currentGame.id ? this.state.currentGame : game;\r\n        const ScoreComponent = currentGame.scoreComponents[this.state.currentScoreComponent].component;\r\n        return (\r\n            <div className='center game-overview'>\r\n                <h2 className='game-title'>Game Overview for {game.name} </h2>\r\n                {this.state.scoreClicked && <h3 className='game-score'>Current Score: {this.state.currentScore}</h3>}\r\n                {this.state.scoreClicked && <ScoreComponent componentParams={currentGame.scoreComponents[this.state.currentScoreComponent].componentParams} score={this.state.currentScore} lastResponse={this.state.lastResponse} handleClick={this.handleClick}/>}\r\n                {!this.state.scoreClicked && <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>{this.state.button.buttonText}</Button>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameOverview","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport Header from './components/header/header.component';\nimport GamesList from './components/gameslist/gameslist.component';\nimport GameOverview from './components/game-overview/game-overview.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path='/' component={GamesList} /> \n        <Route exact path='/score-it' component={GamesList} /> \n        <Route path='/games/:gameId' component={GameOverview} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}